---

- name: Import debian
  ansible.builtin.import_tasks: debian.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Import redhat
  ansible.builtin.import_tasks: redhat.yml
  when: ansible_os_family == "RedHat"

- name: Check falco config directory permissions
  ansible.builtin.file:
    dest: /etc/falco
    state: directory
    mode: '0700'

- name: Get falco version
  ansible.builtin.shell: >
    falco --version | awk '/Falco version:/ { print $3 }'
  register: falco_version
  changed_when: false
  ignore_errors: true

- name: Configure falco
  ansible.builtin.template:
    src: falco.yaml.j2
    dest: /etc/falco/falco.yaml
    mode: '0600'
    backup: yes
    validate: 'falco -c %s -L'
  notify:
    - Restart falco

- name: Configure falco rules
  ansible.builtin.template:
    src: "{{ item.s }}.j2"
    dest: "/etc/falco/{{ item.d }}"
    mode: '0600'
    backup: yes
    validate: 'falco -V %s'
  notify:
    - Falco global check
    - Restart falco
  register: rules
  with_items: "{{ falco_config_template_upload }}"
  when:
    - not falco_rules_complex_validate

- name: Configure falco rules with complex check
  when:
    - falco_rules_complex_validate
  block:
    - name: Configure falco rules
      ansible.builtin.template:
        src: "{{ item.s }}.j2"
        dest: "/etc/falco/{{ item.d }}"
        mode: "0600"
        backup: yes
      notify:
        - Falco global check
        - Restart falco
      register: rules
      with_items: "{{ falco_config_template_upload }}"
    - name: Initialize the list of rules files
      ansible.builtin.set_fact:
        falco_validate_rules_files: []
    - name: Build the list of rules files
      ansible.builtin.include_tasks: build_rules_files_list.yml
      loop: "{{ falco_rules_files }}"
    - name: Validate falco rules  # noqa: no-hander
      ansible.builtin.shell: >
        falco {{ ['-V '] | product(falco_validate_rules_files) | map('join') | list | join(' ') }}
      changed_when: false
      when:
        - rules is changed
  rescue:
    - name: Restore original rules
      ansible.builtin.copy:
        remote_src: true
        src: "{{ item.backup_file }}"
        dest: "{{ item.dest }}"
        mode: preserve
      with_items: "{{ rules.results }}"
      when:
        - rules is changed
        - '"backup_file" in item'
      notify:
        - Falco global check
        - Restart falco
    - name: Clean up backup file
      ansible.builtin.file:
        path: "{{ item.backup_file }}"
        state: absent
      with_items: "{{ rules.results }}"
      when:
        - rules is changed
        - '"backup_file" in item'
    - name: Remove new file
      ansible.builtin.file:
        path: "{{ item.dest }}"
        state: absent
      with_items: "{{ rules.results }}"
      when:
        - rules is changed
        - '"backup_file" not in item'
    - name: Make sure all handlers run
      ansible.builtin.meta: flush_handlers
    - name: Set var to force an early failure
      ansible.builtin.set_fact:
        _complex_validate_failed: true
- name: Force failure if we rescued complex validation
  ansible.builtin.fail:
    msg: Failed to complete complex validation.  Review output.
  when:
    - _complex_validate_failed is defined
    - _complex_validate_failed

- name: Import rsyslog
  ansible.builtin.import_tasks: rsyslog.yml
- name: Import logrotate
  ansible.builtin.import_tasks: logrotate.yml

- name: Import systemd
  ansible.builtin.import_tasks: systemd.yml
  vars:
    unit_name: falco
  when: falco_systemd_restriction_enable and ansible_service_mgr == 'systemd'

- name: Import systemd-falcoctl-artifact-follow
  ansible.builtin.import_tasks: systemd-falcoctl-artifact-follow.yml
  vars:
    unit_name: falcoctl-artifact-follow
  when:
    - ansible_service_mgr == 'systemd'
    - falco_webproxy_env_enable | bool

- name: Print ansible_virtualization_type when verbosity is 1
  ansible.builtin.debug:
    var: ansible_virtualization_type
    verbosity: 1

- name: Ensure service falco enabled and started - not in containers
  ansible.builtin.service:
    name: falco
    enabled: yes
    state: started
  when: >
    not (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker" or ansible_virtualization_type == "containerd")
        )
## note: for containers, it will not be possible to match kernel headers/devel
##    which means module compilation fails. only observed on centos7

- name: Import reporting
  ansible.builtin.import_tasks: reporting.yml
  when: falco_reporting
