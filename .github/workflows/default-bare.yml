---
name: default-bare

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:  # run weekly, every monday 03:00
    - cron: '0 3 * * 1'

permissions: {}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ${{ matrix.distribution }}-${{ matrix.version }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - distribution: ubuntu
            version: '24.04'
            suite: default
            experimental: false
          - distribution: ubuntu
            version: '22.04'
            suite: default
            experimental: false
          - distribution: ubuntu
            version: '24.04-arm'
            suite: default
            experimental: false
    env:
      ANSIBLE_CALLBACKS_ENABLED: profile_tasks
      ANSIBLE_EXTRA_VARS: ""
      ANSIBLE_ROLE: juju4.falco
      ANSIBLE_SUITE: ${{ matrix.suite }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a  # tag=v2.13.1
        with:
          egress-policy: block
          allowed-endpoints: >
            azure.archive.ubuntu.com:80
            d20hasrqv82i0q.cloudfront.net:443
            download.falco.org:443
            esm.ubuntu.com:443
            falco.org:443
            falcosecurity.github.io:443
            files.pythonhosted.org:443
            galaxy.ansible.com:443
            ghcr.io:443
            github.com:443
            hosted-compute-watchdog-prod-eus-02.githubapp.com:443
            hosted-compute-watchdog-prod-iad-02.githubapp.com:443
            packages.microsoft.com:443
            pypi.org:443
            www.google.com:1025
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ANSIBLE_ROLE }}
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'
      - name: Cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830  # tag=v4.3.0
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt
            /var/_install
          key: cache-ansible-harden-${{ steps.get-date.outputs.date }}
      - name: ACL
        run: |
          sudo apt-get install -y acl || true
          mount
          sudo mount -o remount,acl / || true
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ansible-lint flake8 yamllint
          which ansible
          pip3 install ansible
          pip3 show ansible
          ls -l $HOME/.local/bin || true
          ansible --version
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE
          [ -f get-dependencies.sh ] && sh -x get-dependencies.sh
          [ -f molecule/$ANSIBLE_SUITE/requirements.yml ] && ansible-galaxy install -r molecule/$ANSIBLE_SUITE/requirements.yml
          { echo '[defaults]'; echo 'callback_enabled = profile_tasks, timer'; echo 'roles_path = ../:/home/runner/.ansible/roles'; echo 'ansible_python_interpreter: /usr/bin/python3'; } >> ansible.cfg
      - name: Environment
        run: |
          set -x
          pwd
          env
          find -ls
      - name: Before script - systemctl
        run: |
          systemd-analyze security || true
          systemctl status --all --no-pager || true
      - name: run test
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: idempotency run
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS} | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0)  || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 0)
      - name: On failure
        run: |
          systemctl -l --no-pager status
        if: env.WORKFLOW_CONCLUSION == 'failure'  # notify only if failure
      - name: After script - systemctl
        run: |
          systemd-analyze security || true
          systemctl --failed || true
          systemctl status falco || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - etc
        run: |
          set -x
          sudo cat /etc/falco/falco.yaml
          sudo cat /etc/falco/falco_rules.yaml
          sudo cat /etc/falco/falco_rules.local.yaml
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - falco
        run: |
          sudo tail -200 /var/log/falco/falco.log || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - resulting systemd config
        run: |
          cat /lib/systemd/system/falco.service
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - report
        run: |
          sudo -u syslog /usr/local/scripts/falco_report.sh
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - debug
        run: |
          # https://github.com/falcosecurity/falco/issues/2357
          # https://github.com/falcosecurity/falco/issues/2792
          ls -la /sys/kernel/btf/vmlinux
          strings /sys/kernel/btf/vmlinux | grep -e BPF_TRACE_RAW_TP -e BPF_TRACE_FENTRY
          grep DEBUG_INFO /boot/config-*
          sudo apt-get install -y linux-tools-generic
          sudo bpftool feature probe kernel | grep -e "map_type ringbuf is available" -e "program_type tracing is available"
          dpkg -l | grep libbpf
        if: ${{ always() }}
        continue-on-error: true
